import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // This file was generated by flutterfire_cli
void main() async {
  // Ensure Flutter is initialized
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: AuthGate(), // Use the AuthGate as the home
    );
  }
}

class AuthGate extends StatelessWidget {
  const AuthGate({super.key});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      // Listen to the user's authentication state
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        // If the snapshot has no data, it means user is logged out
        if (!snapshot.hasData) {
          return const AuthScreen();
        }

        // If the snapshot has data, it means user is logged in
        return const MainScreen();
      },
    );
  }
}

// ========== Main Screen (Updated) ==========
class MainScreen extends StatelessWidget {
  const MainScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        title: const Text('Responsive App'),
      ),
      body: Column(
        children: [
          Container(
            width: double.infinity,
            height: 100,
            color: Colors.green,
            child: const Center(
              child: Text(
                'Top Section (Fixed Height)',
                style: TextStyle(color: Colors.white, fontSize: 18),
              ),
            ),
          ),
          Expanded(
            child: Container(
              color: Colors.amber,
              child: const Center(
                child: Text(
                  'Main Content (Stretches to fill space)',
                  style: TextStyle(color: Colors.black, fontSize: 18),
                ),
              ),
            ),
          ),
          Container(
            width: double.infinity,
            height: 120,
            color: Colors.red,
            child: Center(
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black,
                  padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  textStyle: const TextStyle(fontSize: 18),
                ),
                // --- START OF CHANGES ---
                onPressed: () {
                  // This is the navigation logic.
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const PicksScreen()),
                  );
                },
                // --- END OF CHANGES ---
                child: const Text('My Picks'),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// ========== Updated Picks Screen ==========
class PicksScreen extends StatefulWidget {
  const PicksScreen({super.key});

  @override
  State<PicksScreen> createState() => _PicksScreenState();
}

class _PicksScreenState extends State<PicksScreen> {
  // State variable to store the selected team.
  String? _selectedTeam;

  // --- NEW ---
  // New state variable to track if the selection is locked.
  bool _isSelectionLocked = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('My Picks'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
      ),
      body: Column(
        children: [
          const SizedBox(height: 20),
          const Text(
            'Game 1: Select a Winner',
            style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                // Team 1 Button
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _selectedTeam == 'Team 1'
                        ? Colors.green
                        : Colors.grey[300],
                    foregroundColor: Colors.black,
                    minimumSize: const Size(150, 50),
                  ),
                  // --- MODIFIED ---
                  // If selection is locked, onPressed is null, disabling the button.
                  onPressed: _isSelectionLocked
                      ? null
                      : () {
                          setState(() {
                            _selectedTeam = 'Team 1';
                          });
                        },
                  child: const Text('Team 1'),
                ),

                // Team 2 Button
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _selectedTeam == 'Team 2'
                        ? Colors.green
                        : Colors.grey[300],
                    foregroundColor: Colors.black,
                    minimumSize: const Size(150, 50),
                  ),
                  // --- MODIFIED ---
                  onPressed: _isSelectionLocked
                      ? null
                      : () {
                          setState(() {
                            _selectedTeam = 'Team 2';
                          });
                        },
                  child: const Text('Team 2'),
                ),
              ],
            ),
          ),
          const SizedBox(height: 30),

          // --- NEW ---
          // This button only appears if a team is selected AND the picks
          // are not yet locked.
          if (_selectedTeam != null && !_isSelectionLocked)
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding:
                    const EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                textStyle: const TextStyle(fontSize: 16),
              ),
              onPressed: () {
                // When pressed, lock the selection and show a confirmation message.
                setState(() {
                  _isSelectionLocked = true;
                });

                // Show a SnackBar for feedback
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Your picks have been saved!'),
                    backgroundColor: Colors.green,
                  ),
                );
              },
              child: const Text('Save Selections'),
            )
        ],
      ),
    );
  }
}